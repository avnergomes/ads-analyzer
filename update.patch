diff --git a/README.md b/README.md
index 96b5f3f595659cf5ae21586d8f2e5dea92caeb8c..307bccabac14682f5b9fe0d098726b2c9520e95c 100644
--- a/README.md
+++ b/README.md
@@ -1,63 +1,71 @@
 # DiA v2.0 - Enhanced Show Analytics Dashboard
 
 ## 🎯 System Corrected According to Client Requirements
 
 ### ✅ Implemented Solutions
 
 #### 1. **Health Dashboard with 5 Quick Visual Indicators**
 - ✅ **Show Health**: Overall score based on sales %, ROAS, days remaining
 - ✅ **Sales Velocity**: Sales speed vs daily target  
 - ✅ **Ad Efficiency**: ROAS with color coding
 - ✅ **Funnel Health**: Conversion efficiency between funnels
 - ✅ **Revenue Pace**: Revenue progress vs total potential
 
 #### 2. **Enhanced Show ID Mapping**
 - ✅ Recognizes variations: `WDC_0927`, `WDC_0927_S2`, `WDC_0927_S3`, `S4`
 - ✅ City name fallback: "Washington DC #2" → `WDC_0927_S2`
 - ✅ Legacy patterns: "US-DC-Sales-2024 - Interest - 2nd - Support2"
 - ✅ Priority system to avoid conflicts
+- ✅ Dynamic token scoring using Google Sheet show catalog (city, date, time, sequence)
+- ✅ Confidence scoring with full mapping and unmatched campaign audit tables
 
 #### 3. **Improved Funnel Detection**
 - ✅ **F1**: `F1`, `Fun1`, `LPViews`, `LPViews_F1`, `LPViews_Fun1`
 - ✅ **F2**: `F2`, `Fun2`, `AddToCart`, `AddToCart_F2`
 - ✅ **F3**: `F3`, `Fun3`, `CONV_AddtoCart`, `CONV_F3`
 - ✅ **Legacy**: Campaigns with `Interest` or `Target`
 
 #### 4. **Metrics from Online Ticket Sale Sheet (Column N)**
 - ✅ **Ticket Cost** = Show Budget ÷ Total Tickets Sold
 - ✅ **Core Stats**: Days to show, Capacity, Holds, Sold
 - ✅ **Daily Sales Target** = Remaining ÷ Days left (vs 7-day average)
 - ✅ **Funnel Efficiency**: Clicks/LP Views/Add to Cart/Conversions per ticket
 - ✅ **Daily Sales CPA**: Total spend ÷ Total tickets sold
 - ✅ **ROAS**: (Revenue from sales / Spend)
 
 #### 5. **Google Sheets Integration**
 - ✅ Direct loading from sheet: `https://docs.google.com/spreadsheets/d/1hVm1OALKQ244zuJBQV0SsQT08A2_JTDlPytUNULRofA/edit?gid=0#gid=0`
 - ✅ Automatic sales data processing
 - ✅ Caching for performance
 
+#### 6. **Meta Ads Multi-file Support & Mapping Overview**
+- ✅ Upload and consolidate up to **3 Meta Ads CSV exports** simultaneously
+- ✅ Automatic source tracking and aggregation of spend/results per show
+- ✅ Visual overview of mapped vs unmatched campaigns with confidence scores
+- ✅ Sample unmatched listings to speed up manual review
+
 ## 🚀 Installation and Setup
 
 ### Prerequisites
 ```bash
 pip install streamlit pandas plotly numpy requests
 ```
 
 ### File Structure
 ```
 DiA/
 ├── app.py                   # Main dashboard (Streamlit Cloud compatible)
 ├── data_processor.py        # Data processor
 ├── campaign_mapping.csv     # Mapping rules
 ├── requirements.txt         # Dependencies
 └── README.md               # This file
 ```
 
 ### Streamlit Community Cloud Setup
 
 #### requirements.txt
 ```txt
 streamlit==1.28.1
 pandas==2.0.3
 plotly==5.17.0
 numpy==1.24.3
diff --git a/README.md b/README.md
index 96b5f3f595659cf5ae21586d8f2e5dea92caeb8c..307bccabac14682f5b9fe0d098726b2c9520e95c 100644
--- a/README.md
+++ b/README.md
@@ -83,55 +91,55 @@ maxUploadSize = 200
 3. **Visit**: https://share.streamlit.io/
 4. **Connect your GitHub repository**
 5. **Set main file path**: `app.py`
 6. **Deploy!**
 
 ### Local Development
 ```bash
 # 1. Clone repository
 git clone <your-repo-url>
 cd DiA
 
 # 2. Install dependencies
 pip install -r requirements.txt
 
 # 3. Run dashboard
 streamlit run app.py
 ```
 
 ## 📊 How to Use the System
 
 ### 1. **Data Loading**
 
 #### Option A: Google Sheets (Recommended)
 1. Paste sheet URL in sidebar
 2. Click "Load from Google Sheets"
-3. Upload Meta Ads CSV file
+3. Upload up to **three** Meta Ads CSV exports (e.g., main, device, time breakdown)
 
 #### Option B: File Upload
 1. Upload sales data CSV
-2. Upload Meta Ads data CSV
+2. Upload Meta Ads data CSV files (maximum of three per batch)
 
 ### 2. **Health Dashboard Interpretation**
 
 #### 🏥 Health Indicators (Traffic Light System)
 - 🟢 **Green**: Excellent performance, continue current strategy
 - 🟡 **Yellow**: Attention needed, monitor closely
 - 🔴 **Red**: Immediate action required
 
 #### 📊 Indicator Metrics
 
 **Show Health (0-100%)**
 - 70-100%: 🟢 Healthy
 - 40-70%: 🟡 Caution
 - 0-40%: 🔴 Critical
 
 **Sales Velocity (%)**
 - ≥100%: 🟢 Target being met
 - 70-99%: 🟡 Below target
 - <70%: 🔴 Well below target
 
 **ROAS (Return on Ad Spend)**
 - ≥3.0x: 🟢 Excellent
 - 1.5-3.0x: 🟡 Good
 - <1.5x: 🔴 Inefficient
 
